Employee class
class Employee {
    private String name;
    private int ID;
    private double salary;

    public Employee(String name, int ID, double salary) {
        this.name = name;
        this.ID = ID;
        this.salary = salary;
    }

    public double getSalary() {
        return salary;
    }
}

// Manager class inheriting from Employee
class Manager extends Employee {
    private double bonus;

    public Manager(String name, int ID, double salary, double bonus) {
        super(name, ID, salary);
        this.bonus = bonus;
    }

    public double getSalary() {
        return super.getSalary() + bonus;
    }
}

// Developer class inheriting from Employee
class Developer extends Employee {
    private int projectsHandled;

    public Developer(String name, int ID, double salary, int projectsHandled) {
        super(name, ID, salary);
        this.projectsHandled = projectsHandled;
    }

    public double getSalary() {
        return super.getSalary();
    }
}

// Tester class inheriting from Employee
class Tester extends Employee {
    private double allowance;

    public Tester(String name, int ID, double salary, double allowance) {
        super(name, ID, salary);
        this.allowance = allowance;
    }

    public double getSalary() {
        return super.getSalary() + allowance;
    }
}

public class Main {
    public static void main(String[] args) {
        Manager manager = new Manager("John Doe", 101, 5000.0, 1000.0);
        Developer developer = new Developer("Jane Smith", 102, 4000.0, 5);
        Tester tester = new Tester("Alice Johnson", 103, 3000.0, 500.0);

        double totalSalary = manager.getSalary() + developer.getSalary() + tester.getSalary();

        System.out.println("Total salary for all employees: " + totalSalary);
    }
}
